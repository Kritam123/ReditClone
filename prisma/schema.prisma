generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @map("userId") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @map("userId") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  createdSubreddits Subreddit[]    @relation("CreatedBy")
  subscriptions     Subscription[]
  votes             Vote[]

  username String? @unique

  image       String?
  accounts    Account[]
  sessions    Session[]
  Post        Post[]
  Comment     Comment[]
  CommentVote CommentVote[]
}

model Subreddit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  creatorId   String? @map("creatorId") @db.ObjectId
  Creator     User?   @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
   id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @map("userId") @db.ObjectId
  subredditId String   @map("subredditId") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String   @map("authorId") @db.ObjectId
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String   @map("subredditId") @db.ObjectId
  comments    Comment[] 
  votes       Vote[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @map("authorId") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("postId") @db.ObjectId

  replyToId String   @map("replyToId") @db.ObjectId
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

model Vote {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  user   User     @relation(fields: [userId], references: [id])
  userId String   @map("userId") @db.ObjectId
  post   Post     @relation(fields: [postId], references: [id])
  postId String   @map("postId") @db.ObjectId
  type   VoteType

  @@index([userId, postId], name: "vote_user_post_index")
}


model CommentVote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("userId") @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String   @map("commentId") @db.ObjectId
  type      VoteType

  @@index([userId, commentId], name: "comment_vote_user_comment_index")
}

